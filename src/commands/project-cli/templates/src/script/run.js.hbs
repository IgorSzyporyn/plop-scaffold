{{#ifEqual "yes" liftoff}}
import minimist from 'minimist'
import path from 'path'
import { runInit } from '../commands/init/run'
import { getCommandFromArgv } from '../utils/get-command-from-argv'
import { setShared } from '../utils/shared'
import { allowedCommands } from './index'
import { runCommand } from './run-command'
import { runHelp } from './run-help'
import { runVersion } from './run-version'

export function run(liftoffEnv) {
  const args = process.argv.slice(2)
  const argv = minimist(args)
  const { configPath = '', cwd } = liftoffEnv
  const distPath = path.join(__dirname, '../')

  setShared({ argv, configPath, cwd, liftoffEnv, distPath })

  const hasInitCommand = argv._.indexOf('init') > -1
  const command = getCommandFromArgv(argv, allowedCommands)

  if (hasInitCommand) {
    runInit()
  } else if (argv.version || argv.v) {
    runVersion()
  } else if (argv.help || argv.h || !command) {
    runHelp()
  } else if (command) {
    runCommand(command)
  }
}
{{else}}
import minimist from 'minimist'
import path from 'path'
import { setShared } from '../utils/shared'
{{#ifEqual "yes" commands}}
import { allowedCommands } from './index'
  {{#ifEqual "yes" init}}
import { runInit } from '../commands/init/run'
  {{/ifEqual}}
import { runHelp } from './run-help'
import { runVersion } from './run-version'
import { runCommand } from './run-command'
{{else}}
import { runExecute } from './run-execute'
import { runHelp } from './run-help'
import { runVersion } from './run-version'
{{/ifEqual}}

export function run() {
  const args = process.argv.slice(2)
  const argv = minimist(args)
  const { cwd } = process
  const distPath = path.join(__dirname, '../')

  setShared({ argv, cwd, distPath })

  {{#ifEqual "yes" commands}}
    {{#ifEqual "yes" init}}
  const hasInitCommand = argv._.indexOf('init') > -1
    {{/ifEqual}}
  const command = getCommandFromArgv(argv._, allowedCommands)

    {{#ifEqual "yes" init}}
  if (hasInitCommand) {
    runInit()
  } else if (argv.version || argv.v) {
    runVersion()
  } else if (argv.help || argv.h || !command) {
    runHelp()
  } else if (command) {
    runCommand(command)
  }
    {{else}}
  if (argv.version || argv.v) {
    runVersion()
  } else if (argv.help || argv.h || !command) {
    runHelp()
  } else if (command) {
    runCommand(command)
  }
    {{/ifEqual}}
  {{else}}
  if (argv.version || argv.v) {
    runVersion()
  } else if (argv.help || argv.h) {
    runHelp()
  } else {
    runExecute()
  }
  {{/ifEqual}}
}
{{/ifEqual}}
