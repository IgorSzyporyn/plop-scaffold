{{#hasHook hooks}}
  {{#hasBothHooks hooks}}
import React, { useEffect, useState } from 'react'
  {{else}}
    {{#ifIn  "useEffect" hooks}}
import React, { useEffect } from 'react'
    {{/ifIn}}
    {{#ifIn  "useState" hooks}}
import React, { useState } from 'react'
    {{/ifIn}}
  {{/hasBothHooks}}
{{else}}
import React from 'react'
{{/hasHook}}
{{#ifNotEqual "no" cssInJs}}
import styled from '{{cssInJs}}'

const Wrapper = styled.div``
{{/ifNotEqual}}
{{#ifIn "usestate" hooks}}
  {{#ifEqual "yes" withExamples}}

const initialState = {
  mounted: false,
}
  {{else}}

const initialState = {}
  {{/ifEqual}}
{{/ifIn}}
{{#ifEqual "yes" withExamples}}

const {{pascalCase name}} = ({ children }) => {
{{else}}

const {{pascalCase name}} = (props) => {
{{/ifEqual}}
{{#ifIn "usestate" hooks}}
  const [myState, setMyState] = useState({ ...initialState })

{{/ifIn}}
{{#ifIn "useeffect" hooks}}
  useEffect(() => {
  {{#ifEqual "yes" withExamples}}
    // Do stuff on mount here
    setState((state) => ({ ...state, mounted: true }))
    // Do stuff on unmount here
    return () => {}
  {{/ifEqual}}
  }, [])
{{/ifIn}}

  return (
  {{#ifNotEqual "no" cssInJs}}
    {{#ifEqual "yes" withExamples}}
    <Wrapper>
      <h1>{title}</h1>
      {children}
    </Wrapper>
    {{else}}
    <Wrapper>Here more TSX</Wrapper>
    {{/ifEqual}}
  {{else}}
    {{#ifEqual "yes" withExamples}}
    <div>
      <h1>{title}</h1>
      {children}
    </div>
    {{else}}
    <div>Here more TSX</div>
    {{/ifEqual}}
  {{/ifNotEqual}}
  )
}

{{pascalCase name}}.displayName = '{{pascalCase name}}'
{{pascalCase name}}.defaultProps = {}

export default {{pascalCase name}}
