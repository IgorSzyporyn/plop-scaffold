{{#hasHook hooks}}
  {{#hasBothHooks hooks}}
import React, { useEffect, useState } from 'react'
  {{else}}
    {{#ifIn "useeffect" hooks}}
import React, { useEffect } from 'react'
    {{/ifIn}}
    {{#ifIn "usestate" hooks}}
import React, { useState } from 'react'
    {{/ifIn}}
  {{/hasBothHooks}}
{{else}}
import React from 'react'
{{/hasHook}}
{{#ifNotEqual "no" cssinjs}}
import styled from '{{cssinjs}}'

const Wrapper = styled.div``
{{/ifNotEqual}}
{{#ifIn "usestate" hooks}}
  {{#ifEqual "yes" examples}}

type {{pascalCase name}}State = {
  mounted: boolean
}

const initialState: {{pascalCase name}}State = {
  mounted: false,
}
  {{else}}

// @NOTE: Linter will most likely complain and suggest Record<string, unknown>
// But left as {} for your to fill in your state signature
type {{pascalCase name}}State = {}

const initialState: {{pascalCase name}}State = {}
  {{/ifEqual}}
{{/ifIn}}
{{#ifEqual "yes" examples}}

export type {{pascalCase name}}Props = {
  title?: string
  children?: React.ReactNode
}

const {{pascalCase name}} = ({ children, title }: {{pascalCase name}}Props) => {
{{else}}

// @NOTE: Linter will most likely complain and suggest Record<string, unknown>
// But left as {} for your to fill in your props signature
export type {{pascalCase name}}Props = {}

const {{pascalCase name}} = (props: {{pascalCase name}}Props) => {
{{/ifEqual}}
{{#ifIn "usestate" hooks}}
  const [myState, setMyState] = useState({ ...initialState })

{{/ifIn}}
{{#ifIn "useeffect" hooks}}
  useEffect(() => {
  {{#ifEqual "yes" examples}}
    // Do stuff on mount here
      {{#ifIn "usestate" hooks}}
    setMyState((state) => ({ ...state, mounted: true }))
      {{/ifIn}}
    // Do stuff on unmount here
    return () => {}
  {{/ifEqual}}
  }, [])
{{/ifIn}}

  return (
  {{#ifNotEqual "no" cssinjs}}
    {{#ifEqual "yes" examples}}
    <Wrapper>
      <h1>{title}</h1>
      {children}
    </Wrapper>
    {{else}}
    <Wrapper>Here more TSX</Wrapper>
    {{/ifEqual}}
  {{else}}
    {{#ifEqual "yes" examples}}
    <div>
      <h1>{title}</h1>
      {children}
    </div>
    {{else}}
    <div>Here more TSX</div>
    {{/ifEqual}}
  {{/ifNotEqual}}
  )
}

{{pascalCase name}}.displayName = '{{pascalCase name}}'
{{#ifEqual "yes" examples}}
{{pascalCase name}}.defaultProps = {
  title: 'Hello World'
}
{{else}}
{{pascalCase name}}.defaultProps = {}
{{/ifEqual}}

export default {{pascalCase name}}
